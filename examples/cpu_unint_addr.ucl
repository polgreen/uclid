module common {
  // This module declares types that are used in the rest of the model.

  type addr_t;
  type word_t = bv8;

  type op_t   = enum { op_mov, op_add, op_sub, op_load, op_store };
  type mode_t = enum { usr_mode, sup_mode };

  type mem_t = [addr_t]word_t;
}

module cpu {
  type addr_t = common.addr_t;
  type mem_t  = common.mem_t;
  type word_t = common.word_t;
  type op_t   = common.op_t;
  type regindex_t = bv1; // type of register file.
  type regs_t = [regindex_t]word_t;

  input imem         : mem_t; // program memory.
  var dmem           : mem_t;   // data memory.
  var regs           : regs_t;
  var pc             : addr_t;
  var inst, result   : word_t;

  function inst2op   (i : word_t) : op_t;
  function inst2reg0 (i : word_t) : regindex_t;
  function inst2reg1 (i : word_t) : regindex_t;
  function inst2imm  (i : word_t) : word_t;
  function inst2addr (i : word_t) : addr_t;
  function nextPC(i : word_t, pc : addr_t) : addr_t; 

  procedure exec_inst(inst : word_t, pc : addr_t)
    returns (result : word_t, pc_next : addr_t)
    modifies regs, dmem;
  {
    var op           : op_t;
    var r0ind        : regindex_t;
    var r1ind        : regindex_t;
    var r0           : word_t;
    var r1           : word_t;

    op = inst2op(inst);
    r0ind, r1ind = inst2reg0(inst), inst2reg1(inst);
    r0, r1 = regs[r0ind], regs[r1ind];
    case
      (op == op_mov)     : { result = inst2imm(inst); }
      (op == op_add)     : { result = r0 + r1; }
      (op == op_sub)     : { result = r0 - r1; }
      (op == op_load)    : { result = dmem[inst2addr(inst)]; }
      (op == op_store)   : { result = r0; dmem[inst2addr(inst)] = r0; }
    esac
    pc_next = nextPC(inst, pc);
    regs[r0ind] = result;
  }

  init {
    assume (forall (r : regindex_t) :: regs[r] == 0bv8);
    assume (forall (a : addr_t) :: dmem[a] == 0bv8);
  }

  next {
    inst' = imem[pc];
    call (result', pc') = exec_inst(inst, pc);
  }
}

module main {
  // Import types
  type addr_t     = common.addr_t;
  type mem_t      = common.mem_t;
  type word_t     = common.word_t;
  type op_t       = common.op_t;
  type regindex_t = cpu.regindex_t;
  
  // instruction memory is the same for both CPUs.
  var imem : mem_t;

  // Create two instances of the CPU module.
  instance cpu1 : cpu(imem : (imem));
  instance cpu2 : cpu(imem : (imem));

  init {
    // Nothing here.
    assume (cpu1->pc == cpu2->pc);
    assume (cpu1->inst == cpu2->inst);
  }

  next {
    // These call statements invoke the next state function of the two CPU module instances.
    // FIXME: next (cpu1)
    next (cpu1);
    next (cpu2);
  }
  
  // These are our properties.
  invariant eq_regs : (forall (ri : regindex_t) :: cpu1->regs[ri] == cpu2->regs[ri]);
  invariant eq_mem  : (forall (a : addr_t) :: cpu1->dmem[a] == cpu2->dmem[a]);
  invariant eq_pc   : (cpu1->pc == cpu2->pc);
  invariant eq_inst : (cpu1->inst == cpu2->inst);

  // The control block defines the commands that will executed as part of the proof script.
  control {
    v = unroll(3);
    check;
    print_results;
    v->print_cex(cpu1->inst, cpu2->inst, cpu1->result, cpu2->result, cpu1->regs[0bv1], cpu2->regs[0bv1]);
  }
}
