// Model counting in Array Shuffle

module main {

  define V(Y : [integer]integer, R : integer, N: integer) : boolean =
        (0 <= R < N) && (forall (i : integer) :: 0 <= i < R ==> i < Y[i] <= N)
                     && (forall (i : integer) :: (i < 0 || i >= R) ==> Y[i] == 0);

  define W(j : integer, R: integer, N: integer) : boolean = R+1 <= j < N;

  proof {

    // (ConstEq) #Y. V(Y, 1, N) = N
    // assert constEq: (R == 1 && N > R) ==> #[(Y: [integer]integer) for (R: integer, N: integer)] :: (V(Y, R, N)) == N;

    // Proving for V
    // (IndLB) #Y. V(Y, R+1, N) >= #Y. V(Y, R, N) * #i. W(i, R, N)
    assert indLB: #[(Y: [integer]integer) for (R: integer, N: integer)] :: (V(Y, R + 1, N)) >=
                  #[(Y: [integer]integer) for (R: integer, N: integer)] :: (V(Y, R, N)) *
                  #[(j: integer) for (R: integer, N: integer)] :: (W(j, R, N))
                  skolems(Y[(R) -> j]);

    // (Range) #i. W(i, R, N) == N - (R + 1)
    assert range: (0 < R < N) ==> #[(i: integer) for (R: integer, N: integer)] :: (W(i, R, N)) == (N - (R + 1));
  }
}

