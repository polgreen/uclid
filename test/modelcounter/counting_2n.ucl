module main {

  define U(arr : [integer]boolean, n : integer) : boolean =
        (forall (i : integer) :: (i < 0 || i >= n) ==> !arr[i]);
  define V(arr : [integer]boolean, n : integer) : boolean =
        (forall (i : integer) :: (i < 0 || i >= n) ==> !arr[i]) &&
        (exists (i : integer) :: 0 <= i < n && arr[i]);
  define W(arr : [integer]boolean, n : integer) : boolean =
        (forall (i : integer) :: !arr[i]);

  proof {
    assert disjoint: #[(arr: [integer]boolean) for (n : integer)] :: (U(arr, n)) ==
                     #[(arr: [integer]boolean) for (n : integer)] :: (V(arr, n)) +
                     #[(arr: [integer]boolean) for (n : integer)] :: (W(arr, n));
    assert constLB:  #[(arr: [integer]boolean) for (n : integer)] :: (W(arr, n)) >= 1;
    assert constUB:  #[(arr: [integer]boolean) for (n : integer)] :: (W(arr, n)) <  2;
    assert forall (n : integer) :: (#[(arr: [integer]boolean) for (n : integer)] :: (W(arr, n))) == 1;
    assert indLB: #[(arr: [integer]boolean) for (n : integer)] :: (U(arr, n+1)) >=
                  #[(arr: [integer]boolean) for (n : integer)] :: (U(arr, n))   *
                  #[(i : integer) for (n : integer)] :: (0 <= i < 2)
                  using arr[n -> i];
  }
}

