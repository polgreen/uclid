module main
{
  type op_t = enum { push, pop };
  type user_t = enum { u1, u2 };

  var data_array    : [integer]integer;
  var user_array    : [integer]user_t;
  var tail_ptr      : integer;
  var head_ptr      : integer;

  input op        : op_t;
  input user      : user_t;
  input data_in   : integer;
  output data_out : integer;

  init {
    head_ptr    = 0;
    tail_ptr    = 0;
    data_out = 0;
  }

  next {
    if (op == push) {
      data_array' = data_array[tail_ptr -> data_in];
      user_array' = user_array[tail_ptr -> user];
      tail_ptr' = tail_ptr + 1;
      data_out' = 0;
    } else {
      if (head_ptr < tail_ptr && user_array[head_ptr] == user) {
        data_out' = data_array[head_ptr];
        head_ptr' = head_ptr + 1;
      } else {
        data_out' = 0;
      }
    }
  }

  hyperinvariant[2] eq_data_out : ((user.1 == u1) && (user.2 == u1) && (op.1 == op.2)) ==> (data_out.1 == data_out.2);
  hyperinvariant[2] eq_ptrs : (head_ptr.1 == head_ptr.2) &&
                      (tail_ptr.1 == tail_ptr.2);
  hyperinvariant[2] eq_users : forall (i : integer) ::
    (i >= head_ptr.1 && i < tail_ptr.1) ==> (user_array.1[i] == user_array.2[i]);  
  hyperinvariant[2] eq_u1_data : forall (i : integer) ::
    (i >= head_ptr.1 && i < tail_ptr.1 && user_array.1[i] == u1) ==> (data_array.1[i] == data_array.1[i]);  

  control {
	v = unroll(10);
	check;
	print_results;
	v.print_cex(head_ptr, tail_ptr, op, user, data_array, user_array, data_out);
  }
}
