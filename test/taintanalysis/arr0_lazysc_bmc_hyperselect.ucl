module main 
{
  input a, b : integer;
  var mem    : [integer]integer;
  output d   : integer;

  init {
    // [ note : mem_t1 is the taint for the whole array.    ]
    // [        mem_t2 is the taint for individual indices. ]
    // mem_t1 = true
    // mem_t2 = const(true, [integer]integer)
    mem = const(0, [integer]integer);
    // d_t = true
    d = 0;
  }

  next {
    // mem_t1' = a_t && mem_t1
    // mem_t2' = mem_t2[a -> b_t]
    mem' = mem[a -> b];
    // d_t = mem_t1 && mem_t2[a]
    d' = mem[a];

    // also:
    // a_t = true (as we are passing in same a to both instances below)
    // b_t = true (as we are passing in same b to both instances below)
  }
  hyperaxiom[2] eq_a: a.1 == a.2;
  hyperaxiom[2] eq_b: b.1 == b.2;
  hyperinvariant[2] eq_d: d.1 == d.2;
  hyperinvariant[2] eq_mem: mem.1 == mem.2;
  control {
    v = lazysc(200);
    //unroll(200);
    check;
    print_results;
  }
}

/*
module main
{
  input a, b    : integer;
  output d1, d2 : integer;

  instance arr1 : arr(a : (a), b : (b), d : (d1));
  instance arr2 : arr(a : (a), b : (b), d : (d2));

  next {
    next (arr1);
    next (arr2);
  }

  invariant eq_d: (d1 == d2);
  invariant eq_mem: (arr1.mem == arr2.mem);

  control {
    v = induction;
    check;
    print_results;
    v.print_cex(
      a, b, d1, d2,
      arr1.mem[a], arr2.mem[a]
    );
  }
}
*/
