module main
{
  var a, b : integer;
  var mem    : [integer]integer;
  var d   : integer;
  var initAssume: boolean;
  function rng(i : integer) : boolean;

  init {
    // d_t = true
    d = 0;
    initAssume = true;
  }

  next {
    // [ note: simplifications are due to definitions in the next block ]

    // [ note : mem_t1 is the taint for the whole array.    ]
    // [        mem_t2 is the taint for individual indices. ]

    // [ simple taints ]
    // mem_t1' = a_t && mem_t1
    //         = mem_t1
    //
    // [ dependent taints ]
    // mem_t1' = a_t && mem_t1
    //         = true

    // [ simple taints ]
    // mem_t2' = mem_t2[a -> b_t]
    // [ dependent taints ]
    // mem_t2' = (lambda i: (if (i == a) then b_t else mem_t2(i)))
    //         = (lambda i: (if (i == a) then rng(a) else mem_t2(i)))
    mem' = mem[a -> b];
    // d_t' = mem_t1 && mem_t2[a]
    d' = mem[a];
    initAssume' = false;
  }

  hyperaxiom[2] eq_b: (!initAssume.1) ==> (rng(a.1) ==> (b.1 == b.2));
  hyperaxiom[2] eq_a: a.1 == a.2;
  hyperinvariant[2] eq_d: rng(a.1) ==> d.1 == d.2;
  hyperinvariant[2] eq_rng_mem: (forall(i : integer) :: rng(i) ==> (mem.1[i] == mem.2[i])); 
  hyperaxiom[2] eq_mem_init: initAssume ==> (forall(i : integer) :: rng(i) ==> mem.1[i] == mem.2[i]);
  control {
	v = lazysc(100);
	check;
	print_results;
	v.print_cex(d, initAssume, rng(a), a, b, mem[a], mem);
  }
}

/*
module main
{
  input a, b1, b2 : integer;
  output d1, d2        : integer;

  instance arr1 : arr(a : (a), b : (b1), d : (d1));
  instance arr2 : arr(a : (a), b : (b2), d : (d2));

  function rng(i : integer) : boolean;

  init {
    assume (forall (i : integer) :: rng(i) ==> (arr1.mem[i] == arr2.mem[i]));
    // translate into taint:
    // [ simple taint v1 ]
    // mem_t1 = false
    // mem_t2 is unconstrainted, but doesn't matter as mem_t1 is false.
    // [ simple taint v2 ]
    //    > let's try to be a little smarter here.
    // mem_t1 = true
    // assume (forall (i : integer) :: rng(i) => mem_t2[i])
    // [ note: v2 is still not good enough to prove the property as b_t is false in the next block. ]

    // [ dependent taint ]
    // mem_t = lambda i: rng(i)
  }
  next {
    next (arr1);
    next (arr2);

    // a_t = true
    // b_t = false        (simple)
    // b_t = rng(a)       (dependent)
    assume (rng(a) ==> (b1 == b2));
  }

  invariant eq_rng_d: rng(a) ==> (d1 == d2);
  invariant eq_rng_mem: (forall (i : integer) :: rng(i) ==> (arr1.mem[i] == arr2.mem[i]));

  control {
    v = induction;
    check;
    print_results;
    v.print_cex(
      a, rng(a), b1, b2, d1, d2,
      arr1.mem[a], arr2.mem[a]
    );
  }
}
*/
