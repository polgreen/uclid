module common {
  // address type: an uninterpreted type.
  type addr_t;
  // word type: a bitvector type.
  type word_t = bv32;
  // type of operations supported by the CPU.
  type op_t = enum {
    op_alu, op_load, op_store,
    op_imode_enter, op_nmode_exit
  };
  // CPU mode.
  type mode_t = enum { normal_mode, isolated_mode };
  // CPU memory type: an array type.
  type mem_t = [addr_t]word_t;

  // define zero constant of the word_t type.
  //const k0_word_t : word_t;
  //axiom k0_word_t == 0bv32;

  // the entry address for isolated mode.
  //const imode_enter_addr : addr_t;
  // the exit address for isolated mode.
  //const nmode_exit_addr : addr_t;
  // the above two constants MUST be different.
  //axiom imode_enter_addr != nmode_exit_addr;
}

module main {
  // import all types from module common
  type * = common.*;

  type regindex_t;
  type regs_t = [regindex_t]word_t;

  var imem         : mem_t;  // program memory.
  var dmem           : mem_t;  // data memory.
  var regs           : regs_t; // registers.
  var pc             : addr_t; // program counter.
  var inst, result   : word_t; // inst reg, result
  var mode           : mode_t; // normal/isolated mode?
  var step           : integer; // stepVar
  input regs_h       : regs_t; // havoc'ed registers 
  // rng of isolated memory.
  var isolated_rng_lo, isolated_rng_hi : addr_t;
  // uninterpreted func. (predicate) for the above.
  var in_rng  		: [addr_t, addr_t, addr_t]boolean;
  // uninterpreted functions for decoding insns.
  var inst2op 		: [word_t]op_t;
  var inst2reg0 	: [word_t]regindex_t;
  var inst2reg1 	: [word_t]regindex_t;
  var inst2addr		: [word_t, word_t, word_t]addr_t;
  // uninterpreted functions for insn. execution
  var aluOp 	: [word_t, word_t, word_t]word_t;
  var nextPC 	: [word_t, addr_t, word_t]addr_t;
  var initFlag : boolean; 
  // Imode enter and exit addresses need to be defined here
  var imode_enter_addr, nmode_exit_addr : addr_t; 
  var k0_word_t 	: word_t;
  
  // macro: is an addr in isolated memory?
  define in_isolated_memory (a : addr_t) : boolean 
          = in_rng[a, isolated_rng_lo, isolated_rng_hi];

  // assumptions on imode entry and exit addresses
  /*
  axiom (forall (a : addr_t) :: 
          (a == common.imode_enter_addr) 
              ==> in_isolated_memory(a));
  axiom (forall (b : addr_t) :: 
          (b == common.nmode_exit_addr) 
              ==> !in_isolated_memory(b));
  */
  axiom (imode_enter_addr != nmode_exit_addr);
  axiom (k0_word_t == 0bv32);
  axiom (in_isolated_memory(imode_enter_addr));
  axiom (!in_isolated_memory(nmode_exit_addr));
  // code removed for formatting reasons:
  // 1. code for procedure exec_inst (see Example 3)
  // 2. init and next blocks (see Example 4)
  procedure exec_inst(instr : word_t, pc : addr_t)
    returns (pc_next : addr_t)
    modifies regs, result, dmem, mode;
  {
    var op    : op_t;
    var r0ind, r1ind : regindex_t;
    var r0, r1    : word_t;
    var addr  : addr_t;
    //var step  : integer;
    // get opcode.
    op = inst2op[instr];
    // get operands.
    r0ind, r1ind = inst2reg0[instr], inst2reg1[instr];
    r0, r1 = regs[r0ind], regs[r1ind];
    // get next pc (overwritten by imode/nmode).
    pc_next = nextPC[instr, pc, r0];
    // get memory address 
    addr = inst2addr[instr, r0, r1];
    // If we are in isolated mode, we only 
    // set pc_next to isolated address.
    assume (mode == isolated_mode) ==> (in_isolated_memory(pc_next));
    // If we are in isolated mode, we only 
    // read from isolated memory.
    assume (mode == isolated_mode && op == op_load) ==> in_isolated_memory(addr);
    // If we are already in isolated mode, 
    // we don't execute imodes.
    assume (mode == isolated_mode) ==> (op != op_imode_enter);
    case
      // alu operation.
      (op == op_alu) : {
        result = aluOp[instr, r0, r1];
        regs[r0ind] = result;
      }
      // load instruction.
      (op == op_load) : {
        // check permissions.
        if (mode == isolated_mode || 
            !in_isolated_memory(addr)) 
        {
          // perform load
          result = dmem[addr]; 
        } else {
          // load failed, return 0.
          result = k0_word_t; 
        }
        regs[r0ind] = result;
      }
      // store instruction.
      (op == op_store) : {
        result = k0_word_t;
        // check permissions.
        if (mode == isolated_mode || 
            !in_isolated_memory(addr)) 
        {
          // perform store.
          dmem[addr] = r0;
        }
      }
      // enter isolated mode.
      (op == op_imode_enter) : {
        assert (mode == normal_mode);
        result = k0_word_t;
		
        // zero out registers.
        //havoc regs;
	//regs = regs_h;
        //assume (forall (r : regindex_t) 
        //          :: regs[r] == common.k0_word_t);
	regs = const(k0_word_t, regs_t);
        // set pc.
        pc_next = imode_enter_addr;
        mode = isolated_mode;
		
      }
      // exit to normal mode.
      (op == op_nmode_exit) : {
	assert (mode == isolated_mode);
        result = k0_word_t;
        // zero out registers.
        //havoc regs;
		
	//regs = regs_h;
        //assume (forall (r : regindex_t) 
        //          :: regs[r] == common.k0_word_t);
	regs = const(k0_word_t, regs_t);
        // set pc.
        pc_next = nmode_exit_addr;
        mode = normal_mode;
		
      }
    esac
  }
  init {
	//step = 0;
	//mode = normal_mode;
    // reset registers.
    //assume (forall (r : regindex_t) 
    //            :: regs[r] == common.k0_word_t);
    // set instruction to some deterministic value.
    k0_word_t = 0bv32;
    inst = k0_word_t;
    // start off execution at a deterministic address.
    pc = nmode_exit_addr;
    // in normal mode.
    mode = normal_mode;
    initFlag = true;
    step = 0;
	
  }

  next {
   // step' = step + 1;
    k0_word_t' = 0bv32;
    initFlag' = false;
    inst' = imem[pc];
    call (pc') = exec_inst(inst', pc);
    step' = step + 1;
	
  }

  hyperaxiom[2] rng: in_rng.1 == in_rng.2;
  hyperaxiom[2] instOp: inst2op.1 == inst2op.2;
  hyperaxiom[2] instReg: inst2reg0.1 == inst2reg0.2;
  hyperaxiom[2] instReg1: inst2reg1.1 == inst2reg1.2;
  hyperaxiom[2] instAddr: inst2addr.1 == inst2addr.2;
  hyperaxiom[2] alu: aluOp.1 == aluOp.2;
  hyperaxiom[2] n: (nextPC.1) == (nextPC.2); 
  hyperaxiom[2] eq_enter: imode_enter_addr.1 == imode_enter_addr.2;
  hyperaxiom[2] eq_exit: nmode_exit_addr.1 == nmode_exit_addr.2; 
  //hyperaxiom[2] eq_inst1: imem.1 == imem.2;

  hyperaxiom[2] regs1: initFlag.1 ==> (forall (r : regindex_t)
                :: regs.1[r] == 0bv32);
  hyperaxiom[2] regs2: initFlag.1 ==> (forall (r : regindex_t)
                :: regs.2[r] == 0bv32);
  hyperaxiom[2] lo: (isolated_rng_lo.1 == isolated_rng_lo.2); 
  hyperaxiom[2] hi: (isolated_rng_hi.1 == isolated_rng_hi.2); 
  hyperaxiom[2] supervisor: initFlag.1 ==> (forall(a : addr_t) :: in_rng.1[a, isolated_rng_lo.1, isolated_rng_hi.2] ==> (dmem.1[a] == dmem.2[a]));
  // Removed init_flag
  hyperaxiom[2] imem_eq: (forall(a : addr_t) :: (in_rng.1[a, isolated_rng_lo.1, isolated_rng_hi.1]) ==> (imem.1[a] == imem.2[a]));
  // Both the CPUs enter isolated mode at the same time
  // Removed init_flag
  hyperaxiom[2] imode: ((inst2op.1[inst.1] == op_imode_enter || inst2op.1[inst.2] == op_imode_enter) ==> (inst.1 == inst.2)); 
  //hyperaxiom[2] fault: (step.1 == 3) ==> (mode.1 != mode.2);
  /*axiom (forall (a : addr_t) :: 
          (a == imode_enter_addr) 
              ==> in_isolated_memory(a));

  axiom (forall (a : addr_t) :: 
	     (a == nmode_exit_addr) 
              ==> !in_isolated_memory(a));*/	
  //hyperinvariant[2] eq_dmem: (forall (a : addr_t) :: (in_rng.1[a, isolated_rng_lo.1, isolated_rng_hi.2] ==> (dmem.1[a] == dmem.2[a])));
  //hyperinvariant[2] eq_reg_init: initFlag.1 ==> (forall(a : addr_t) :: (in_rng.1[a, isolated_rng_lo.1, isolated_rng_hi.1]) ==> (imem.1[a] == imem.2[a]));
  hyperinvariant[2] eq_mode: (mode.1 == mode.2);
  //hyperinvariant[2] eq_pc: (mode.1 == isolated_mode) ==> (pc.1 == pc.2);
  //hyperinvariant[2] eq_step: step.1 == step.2;
  //hyperinvariant[2] eq_inst: (mode.1 == isolated_mode) ==> (inst.1 == inst.2);
  //hyperinvariant[2] eq_regs : (forall (ri : regindex_t) :: (mode.1 == isolated_mode) ==> (regs.1[ri] == regs.2[ri]));  
  //hyperinvariant[2] eq_sup_rng : (isolated_rng_lo.1 == isolated_rng_lo.2) && (isolated_rng_hi.1 == isolated_rng_hi.2); 
  //hyperinvariant[2] in_pc_rng1 : (mode.1 == isolated_mode) ==> in_rng(pc.1, isolated_rng_lo.1, isolated_rng_hi.1); 
  //hyperinvariant[2] in_pc_rng2 : (mode.2 == isolated_mode) ==> in_rng(pc.2, isolated_rng_lo.2, isolated_rng_hi.2);  
  //hyperinvariant[2] eq_imem: (forall (a : addr_t) :: (in_rng(a, isolated_rng_lo.1, isolated_rng_hi.1)) ==> (imem.1[a] == imem.2[a])); 

  control {
    v = horn;//lazysc(4);
    //check;
    //print_results;
    //v.print_cex(pc); 
  }
}
/*
module main {
  // Import types.
  type * = common.*;
  type regindex_t = cpu.regindex_t;

  // Instruction memory for the CPUs.
  var imem1, imem2 : mem_t;

  // Create two instances of the CPU module.
  instance cpu1 : cpu(imem : (imem1));
  instance cpu2 : cpu(imem : (imem2));

  init {
    // Assume same isolated rngs.
    assume (cpu1.isolated_rng_lo == cpu2.isolated_rng_lo);
    assume (cpu1.isolated_rng_hi == cpu2.isolated_rng_hi);
    // Supervisor memory starts off identical.
    assume (forall (a : addr_t) :: (cpu.in_rng(a, cpu1.isolated_rng_lo, cpu2.isolated_rng_hi)) ==> (cpu1.dmem[a] == cpu2.dmem[a]));
    assume (forall (a : addr_t) :: (cpu.in_rng(a, cpu1.isolated_rng_lo, cpu1.isolated_rng_hi)) ==> (imem1[a] == imem2[a]));
  }

  next {
    next (cpu1);  next (cpu2);
    // imodes are taken in sync
    assume (cpu.inst2op(cpu1.inst) == op_imode_enter || cpu.inst2op(cpu2.inst) == op_imode_enter) ==> (cpu1.inst == cpu2.inst);
  }

  // PROPERTY: isolated mode memory is identical.
  property eq_dmem : (forall (a : addr_t) :: (cpu.in_rng(a, cpu1.isolated_rng_lo, cpu2.isolated_rng_hi)) ==> (cpu1.dmem[a] == cpu2.dmem[a]));
  // The two CPUs change mode in sync.
  invariant eq_mode : (cpu1.mode == cpu2.mode);
  // CPUs have the same PC when in isolated mode.
  invariant eq_pc   : (cpu1.mode == isolated_mode) ==> (cpu1.pc == cpu2.pc);
  // In isolated mode, CPUs execute the same code.
  invariant eq_inst : (cpu1.mode == isolated_mode) ==> (cpu1.inst == cpu2.inst);
  // In isolated mode, CPUs have same reg values.
  invariant eq_regs : (forall (ri : regindex_t) :: (cpu1.mode == isolated_mode) ==> (cpu1.regs[ri] == cpu2.regs[ri]));
  // Supervisor rng of memory is the same.
  invariant eq_sup_rng : (cpu1.isolated_rng_lo == cpu2.isolated_rng_lo) && (cpu1.isolated_rng_hi == cpu2.isolated_rng_hi);
  // In isolated mode, PC is in isolated rng.
  invariant in_pc_rng1 : (cpu1.mode == isolated_mode) ==> cpu.in_rng(cpu1.pc, cpu1.isolated_rng_lo, cpu1.isolated_rng_hi);
  invariant in_pc_rng2 : (cpu2.mode == isolated_mode) ==> cpu.in_rng(cpu2.pc, cpu2.isolated_rng_lo, cpu2.isolated_rng_hi);
  // Same for instruction memory.
  invariant eq_imem : (forall (a : addr_t) :: (cpu.in_rng(a, cpu1.isolated_rng_lo, cpu1.isolated_rng_hi)) ==> (imem1[a] == imem2[a]));

  control {
    v = induction;
    check;
    print_results;
    v.print_cex(
        cpu.inst2op(cpu1.inst), cpu.inst2op(cpu2.inst), cpu1.result, cpu2.result, cpu1.mode, cpu2.mode, cpu1.pc, cpu2.pc, cpu1.isolated_rng_lo, cpu2.isolated_rng_lo, cpu1.isolated_rng_hi, cpu2.isolated_rng_hi, cpu.in_rng(cpu1.pc, cpu1.isolated_rng_lo, cpu1.isolated_rng_hi), cpu.in_rng(cpu2.pc, cpu2.isolated_rng_lo, cpu2.isolated_rng_hi));
  }
}*/
