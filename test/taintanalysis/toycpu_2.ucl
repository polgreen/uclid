module main {
	type addr_t;
	type word_t = bv32;
	type op_t = enum { isolated_enter_op, isolated_exit_op, nop}; 
	type mode_t = enum { isolated, normal };

	var imem : [addr_t]word_t;
	var in_rng : [addr_t, addr_t, addr_t]boolean;
	var in_isolated_lo, in_isolated_hi : addr_t;
	var pc : addr_t;
	var isolated_enter, isolated_exit: addr_t;
	var instr: word_t;
	var start_addr : addr_t;
	var mode: mode_t; 
	var inst2op : [word_t]op_t;
	var next_pc : [word_t, addr_t]addr_t;

	init 
	{
	    instr = 0bv32;
	    pc = start_addr;
	    mode = normal;
	}

	next 
	{
	    instr' = imem[pc];
	    case 
		(inst2op[instr'] == isolated_enter_op) : {
			mode' = isolated;
			pc' = isolated_enter;
	    	}
    		(inst2op[instr'] == isolated_exit_op) : {
			mode' = normal;
			pc' = isolated_exit;
		}
		(inst2op[instr'] == nop) : {
			pc' = next_pc[instr, pc];
		} 
	    esac
	}

	hyperaxiom[2] rng: in_rng.1 == in_rng.2;
  	hyperaxiom[2] instOp: inst2op.1 == inst2op.2;
	hyperaxiom[2] st: start_addr.1 == start_addr.2;
	
  	hyperaxiom[2] n: (next_pc.1) == (next_pc.2);
  	hyperaxiom[2] eq_enter: isolated_enter.1 == isolated_enter.2;
 	hyperaxiom[2] eq_exit: isolated_exit.1 == isolated_exit.2;

  	hyperaxiom[2] lo: (in_isolated_lo.1 == in_isolated_lo.2);
  	hyperaxiom[2] hi: (in_isolated_hi.1 == in_isolated_hi.2);
  	hyperaxiom[2] imem_eq: (forall(a : addr_t) :: (in_rng.1[a, in_isolated_lo.1, in_isolated_hi.1]) ==> (imem.1[a] == imem.2[a]));
	hyperaxiom[2] imode: ((inst2op.1[instr.1] == isolated_enter_op || inst2op.1[instr.2] == isolated_enter_op) ==> (instr.1 == instr.2));
		
	hyperaxiom[2] iso_enter: (in_rng.1[isolated_enter.1, in_isolated_lo.1, in_isolated_hi.1]);
        hyperaxiom[2] iso_exit:  (!in_rng.1[isolated_exit.1, in_isolated_lo.1, in_isolated_hi.1]);
        hyperaxiom[2] neq: (isolated_enter.1 != isolated_exit.1);
	hyperaxiom[2] i1: (mode.1 == isolated) ==> (inst2op.1[instr.1] != isolated_enter_op);
        hyperaxiom[2] i2: (mode.1 == isolated) ==> (in_rng.1[pc.1, in_isolated_lo.1, in_isolated_hi.1]);
	hyperaxiom[2] i3: (mode.2 == isolated) ==> (inst2op.2[instr.2] != isolated_enter_op);
        hyperaxiom[2] i4: (mode.2 == isolated) ==> (in_rng.2[pc.2, in_isolated_lo.2, in_isolated_hi.2]);

	hyperinvariant[2] eq_mode: mode.1 == mode.2;
	hyperinvariant[2] eq_arr: in_rng.1 == in_rng.2;
	hyperinvariant[2] weird: (forall(a : addr_t) :: (in_rng.1[a, in_isolated_lo.1, in_isolated_hi.1]) ==> (imem.1[a] == imem.2[a]));
	control {
		v = horn;
		check;
		print_results;
	}
	
}
