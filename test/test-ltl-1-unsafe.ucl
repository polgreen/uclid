module main {
  type state_t = enum { s1, s2, s3 };
  var state : state_t;
  
  init {
    state = s1;
  }
  
  next {
	case
	  (state == s1) : { state = s2; }
	  (state == s2) : { state = s3; }
	  (state == s3) : { state = s1; }
	esac
  }
  
  property s1X[LTL]  : G((state == s1) ==> X(state == s3));
  property s2X[LTL]  : G((state == s2) ==> X(state == s3));
  property s3X[LTL]  : G((state == s3) ==> X(state == s1));

  property s1XX[LTL]  : G((state == s1) ==> X(X(state == s3)));
  property s2XX[LTL]  : G((state == s2) ==> X(X(state == s1)));
  property s3XX[LTL]  : G((state == s3) ==> X(X(state == s2)));
  
  control {
    f = bmc[s1X, s2X, s3X, s1XX, s2XX, s3XX](6);
    check;
    // print_results;
  } 
}
