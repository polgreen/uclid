module main {
    var n : int;
    var n_init : int;
    var c : int;

    // taken from a tail-recurisve definition of the mccarthy 91 function.
    procedure mtaux(x: int, y: int) returns (z:int, w: int) {
        if (y == 0) {
            z := x;
            y := 0;
        } else {
        	if (x > 100) {
            	z := x - 10;
            	y := y - 1;
        	} else {
            	z := x + 11;
            	y := y + 1;
        	}
    	}
    }

    init {
        havoc n_init;
        n := n_init;
        c := 1;
    }
    next {
        call (n, c) := mtaux(n, c);
        assert ((c == 0) && (n_init <= 100)) ==> (n == 91);
    }

    control {
        initialize;
        simulate (20);
        decide;
    }
}
