module common {
  type addr_t = bv8;
  type word_t = bv8;
  type mem_t = [addr_t]word_t;
}

module cpu {
  type addr_t = common.addr_t;
  type mem_t = common.mem_t;
  type word_t = common.word_t;
  
  input mem : mem_t;
  var pc : addr_t;
  var inst : word_t;

  init {
      pc = 0bv8;
  }

  next {
      inst = mem[pc];
      pc = pc + 1bv8;
  }
}
  
module main {
  type addr_t = common.addr_t;
  type mem_t = common.mem_t;
  type word_t = common.word_t;

  var mem : mem_t;

  instance c1 : cpu(mem : (mem));
  instance c2 : cpu(mem : (mem));
  next {
    next (c1);
    next (c2);
  }
  
  property eq_pc : (c1->pc == c2->pc);
  control {
    unroll(3);
    check;
  }
}
