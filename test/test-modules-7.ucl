module alu  {
  type data_t = bv4;

  input a, b : data_t;
  output result : data_t;

  next {
    result' = a + b;
  }
}

module main {
  type addr_t = bv8;
  type opcode_t = bv6;  
  type data_t = bv4;
  type regindex_t = bv2;

  var mem    : [addr_t]opcode_t;
  var regs   : [regindex_t]data_t;
  var pc     : addr_t;
  var res    : data_t;
  var r0     : data_t;
  var r1     : data_t;
  var index  : regindex_t;

  init {
    assume (forall (r : regindex_t) :: regs[r] == 1bv4);
    assume (forall (a : addr_t) :: mem[a] == 0bv6);
    pc = 0bv8;
  }

  instance alu_i : alu (a : (r0'), b : (r1'), result : (res));

  procedure next_inst()
    returns (r0ind : regindex_t)
    modifies r0, r1;
  {
    var opcode : opcode_t;
    var r1ind  : regindex_t;

    opcode = mem[pc];

    r0ind = opcode[3:2];
    r1ind = opcode[5:4];

    r0 = regs[r0ind];
    r1 = regs[r1ind];
  }

  procedure set_regs(index : regindex_t, res : data_t)
    modifies regs;
  {
    regs[index] = res;
  }

  next {
    call (index') = next_inst();
    next (alu_i);
    call set_regs(index', res');
  }
  
  control {
    v = unroll(3);
    check;
    print_results;
    
  }
}
