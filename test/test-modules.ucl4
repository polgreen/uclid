module alu  {
  type cmd_t = enum { add, sub, nop };
  type data_t = bv4;
  
  input a, b : data_t;
  input cmd : cmd_t;
  output result : data_t;
  
  next {
    case
      (cmd == add) : {
        result := a + b;
      }

      (cmd == sub) :  { 
        result := a - b;
      }
    esac
  }
}

module main {
  type cmd_t  = enum { add, sub, nop };
  type addr_t = bv8;
  type opcode_t = bv6;  
  type data_t = bv4;
  type regindex_t = bv2;
  
  var   mem    : [addr_t]opcode_t;
  var   regs   : [regindex_t]data_t;
  var   pc     : addr_t;
  var   opcode : opcode_t;
  var   cmd    : cmd_t;
  var   r0ind  : regindex_t;
  var   r1ind  : regindex_t;  
  var   r0     : data_t;
  var   r1     : data_t;
  var   res    : data_t;
  var   cnt    : data_t;

  init {
	assume (forall (r : regindex_t) :: regs[r] == 1bv4);
	cnt := 1bv4;
	assume (forall (a : addr_t) :: mem[a] == 0bv6);
    pc := 0bv8;
  }

  instance alu : alu (cmd : (cmd), a : (r0), b : (r1), result : (res));

  property cnt_eq_r0 : (cnt == regs[0bv2]);

  next {
    opcode := mem[pc];
    case 
      opcode[1:0] == 0bv2 : { cmd := add; }
      opcode[1:0] == 1bv2 : { cmd := sub; }
      true                : { cmd := nop; }
    esac

    r0ind := opcode[3:2];
    r1ind := opcode[5:4];

    r0 := regs[r0ind];
    r1 := regs[r1ind];
    
	call (alu);
	
	regs[r0ind] := res[3:0];

	cnt := cnt + cnt;
	pc := pc + 1bv8;
  }
  
  control {
    initialize;
    simulate(3);
    decide;
    print_results;
    print_cex ( cnt, regs[0bv2], regs[1bv2] );
  }
}
