module main {
  type num = bv8;
  type bit = bool;
  type tup1 = {num, num, bit};
  type rec1 = record {a : num, b : num, c : bit };
  type rec2 = record { r : rec1, b : num };
  
  var st : tup1;

  procedure foo(stIn : tup1) returns (stOut: tup1) {
    stOut._1 := stIn._1 + 1bv8;
    stOut._2 := stIn._2 + stIn._1;
    stOut._3 := !stIn._3; 
  }
  
  init {
    st := {0bv8, 0bv8, true}; 
  }
  
  next {
    call (st) := foo(st);
    
    assert (st._1 <= st._2);
  }
  
  control {
   // initialize;
   // simulate (5);
   // decide;
  }
}
