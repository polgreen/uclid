module common {
  type addr_t = bv8;
  type word_t = bv8;

  type op_t = enum { add, sub, load, store };
  type mem_t = [addr_t]word_t;
}

module cpu {
  type addr_t = common :: addr_t;
  type mem_t = common :: mem_t;
  type word_t = common :: word_t;
  type op_t = common :: op_t;
  
  type regindex_t;
  type regs_t = [regindex_t]word_t;
  
  
  var mem : mem_t;
  var regs : regs_t;
  var pc : addr_t;
  
  function word2op(w : word_t) : op_t;
  function word2reg0(w : word_t) : regindex_t;
  function word2reg1(w : word_t) : regindex_t;
  function word2nextPC(w : word_t)  : addr_t;

  procedure next_instruction() returns () {
      var inst : word_t;
      var op : op_t;
      var r0ind : regindex_t;
      var r1ind : regindex_t;
      var r0 : word_t;
      var r1 : word_t;
      var result : word_t;

      // get the next instruction.
      inst := mem[pc];
      // find its operation
      op := word2op(inst);
      // and its operands
      r0ind := word2reg0(inst);
      r1ind := word2reg1(inst);
      r0 := regs[r0ind];
      r1 := regs[r1ind];
      // now execute
      case
        (op == add)   : { result := r0 + r1; }
        (op == sub)   : { result := r0 - r1; }
        (op == load)  : { result := mem[r1]; }
        (op == store) : { result := r0; mem[r0] := r1; }
      esac
      regs[r0ind] := result;
  }

  init {
      assume (forall (r : regindex_t) :: regs[r] == 0bv8);
  }

  next {
      call () := next_instruction();
  }
}
  
module main {

  instance cpu_i : cpu();
  next {
      call (cpu_i);
  }
  control {
    print_module;
  }
}
