module main {
  type t0 = int;
  type t1 = bool;
  type t2 = enum {red, green, blue};
  type t3 = record {a: t0, b: t0, c: bool};
  type t4 = record {a: t0, b: t0, c: record {d: bool, e: t3}};

  var y_global: t0;
  var z_global : t0;

  input mem_in : int -> int;

  procedure f(x: t0, y: t0) returns (z:t0) { 
    localvar x_local: t0;
    assume (x_local > 0); 
    assert (x_local <= 1); 
    havoc x_local; 
    case 
        x_local > 0 : { z := x + y; }
        x_local <= 0 : { z := x - y; }
    esac 
  }
  
  output mem_out : [int] int;
  
  init {
    havoc y_global;
    havoc z_global;
  }
  
  next {
    call (y_global) := f(y_global, z_global);
    z_global := y_global + 1;  
  }
}
