
module main
{
  var numbers: [integer]integer;
  var tail : integer;
  var initialized : boolean;

  input push_valid   : boolean;
  input push_value   : integer;
  input search_value : integer;
  output value_found : boolean;

  init {
    tail = 0;
    initialized = false;
  }

  next {
    initialized' = true;

    if (push_valid) {
      call push();
    }
    // call (value_found') = search();
  }

  invariant push_affects_tail: initialized ==> (push_valid ==> (tail == old(tail) + 1));

  procedure push()
    ensures numbers[old(tail)] == push_value;
    ensures tail == old(tail) + 2;
    modifies numbers, tail;
  {
    numbers[tail] = push_value;
    tail = tail + 1;
  }

  procedure search()
    returns (found : boolean)
    requires (tail >= 0);
    ensures (exists (idx : integer) :: idx >= 0 && idx < tail && numbers[idx] == search_value) <==> found;
  {
    var i : integer;

    i = 0;
    found = false;
    while (i < tail)
      invariant (i >= 0 && i <= tail);
      invariant (exists (idx : integer) :: idx >= 0 && idx < i && numbers[idx] == search_value) <==> found;
    {
      if (numbers[i] == search_value) {
        found = true;
      }
      i = i + 1;
    }
  }

  control {
    // v = verify(push);
    // check;
    // print_results;
    // v.print_cex(numbers, tail, push_value);

    clear_context;
    print_module;
	v = unroll(5);
	check;
	print_results;

    // v.print_cex(numbers, i, search_value, found, tail);
  }
}
