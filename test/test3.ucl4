module testModule {
  var y: int;
  input mem_in : int * int -> int;
  type t = bool;
  type t = enum {red, green, blue};
  type t = record {a: int, b: int, c: bool};
  type t = record {a: int, b: int, c: record {d: bool, e: t}};
  var z : t;

  procedure f(x: int, y: int) returns (z:int) { 
    localvar x: int;
    assume (x > 0); 
    assert (x < 1); 
    havoc x; 
    x,y := y,x; 
    case 
        i > 0 : { x := 1; x := 2; }
        i < 0 : { x := 2; }
    esac 
  }
  output mem_out : [int] int;

  init {
    for i in range(0,1024) {
      x[i] := 1;
    }
  }
  next {
    for i in range(0,1024) {
      x[i] := ITE(i > 1000,1,2);
    }
    havoc x;
  }
}
